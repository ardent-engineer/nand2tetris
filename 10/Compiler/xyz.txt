<class>
	<keyword> class </keyword>
	<identifier> Main </identifier>
	<symbol> { </symbol>
<subroutineDec>
	<keyword> function </keyword>
	<keyword> void </keyword>
	<identifier> main </identifier>
	<symbol> ( </symbol>
<parameterList>
</parameterList>
	<symbol> ) </symbol>
<subroutineBody>
	<symbol> { </symbol>
<varDec>
	<keyword> var </keyword>
	<identifier> Array </identifier>
	<identifier> a </identifier>
	<identifier> b </identifier>
	<identifier> c </identifier>
</varDec>
<statements>
<letStatement>
	<keyword> let </keyword>
	<identifier> a </identifier>
	<symbol> = </symbol>
	<keyword> let </keyword>
</letStatement>
<letStatement>
	<keyword> let </keyword>
	<identifier> b </identifier>
	<symbol> = </symbol>
	<keyword> let </keyword>
</letStatement>
<letStatement>
	<keyword> let </keyword>
	<identifier> c </identifier>
	<symbol> = </symbol>
	<keyword> let </keyword>
</letStatement>
<letStatement>
	<keyword> let </keyword>
	<identifier> a </identifier>
	<symbol> [ </symbol>
	<symbol> = </symbol>
<letStatement>
	<keyword> let </keyword>
	<identifier> a </identifier>
	<symbol> [ </symbol>
	<symbol> = </symbol>
<letStatement>
	<keyword> let </keyword>
	<identifier> a </identifier>
	<symbol> [ </symbol>
	<symbol> = </symbol>
<letStatement>
	<keyword> let </keyword>
	<identifier> b </identifier>
	<symbol> [ </symbol>
	<symbol> = </symbol>
<letStatement>
	<keyword> let </keyword>
	<identifier> a </identifier>
	<symbol> [ </symbol>
	<symbol> = </symbol>
<letStatement>
	<keyword> let </keyword>
	<identifier> c </identifier>
	<symbol> [ </symbol>
	<symbol> = </symbol>
<letStatement>
	<keyword> let </keyword>
	<identifier> c </identifier>
	<symbol> = </symbol>
	<keyword> do </keyword>
</letStatement>
<doStatement>
	<keyword> do </keyword>
<doStatement>
	<keyword> do </keyword>
<doStatement>
	<keyword> do </keyword>
<doStatement>
	<keyword> do </keyword>
<doStatement>
	<keyword> do </keyword>
<doStatement>
	<keyword> do </keyword>
<doStatement>
	<keyword> do </keyword>
<doStatement>
	<keyword> do </keyword>
<doStatement>
	<keyword> do </keyword>
<letStatement>
	<keyword> let </keyword>
	<identifier> c </identifier>
	<symbol> = </symbol>
	<keyword> if </keyword>
</letStatement>
<ifStatement>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> { </symbol>
	<symbol> { </symbol>
<statements>
<doStatement>
	<keyword> do </keyword>
<letStatement>
	<keyword> let </keyword>
	<identifier> c </identifier>
	<symbol> = </symbol>
	<keyword> let </keyword>
</letStatement>
<letStatement>
	<keyword> let </keyword>
	<identifier> c </identifier>
	<symbol> [ </symbol>
	<symbol> = </symbol>
<letStatement>
	<keyword> let </keyword>
	<identifier> c </identifier>
	<symbol> = </symbol>
	<keyword> let </keyword>
</letStatement>
<letStatement>
	<keyword> let </keyword>
	<identifier> c </identifier>
	<symbol> [ </symbol>
	<symbol> = </symbol>
<letStatement>
	<keyword> let </keyword>
	<identifier> b </identifier>
	<symbol> = </symbol>
	<keyword> let </keyword>
</letStatement>
<letStatement>
	<keyword> let </keyword>
	<identifier> b </identifier>
	<symbol> [ </symbol>
	<symbol> = </symbol>
</statements>
	<symbol> } </symbol>
</ifStatement>
<doStatement>
	<keyword> do </keyword>
<doStatement>
	<keyword> do </keyword>
<doStatement>
	<keyword> do </keyword>
<doStatement>
	<keyword> do </keyword>
<doStatement>
	<keyword> do </keyword>
<doStatement>
	<keyword> do </keyword>
</statements>
	<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
	<keyword> function </keyword>
	<keyword> int </keyword>
	<identifier> double </identifier>
	<symbol> ( </symbol>
<parameterList>
</parameterList>
	<symbol> ) </symbol>
<subroutineBody>
	<symbol> { </symbol>
<statements>
</statements>
	<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
	<keyword> function </keyword>
	<keyword> void </keyword>
	<identifier> fill </identifier>
	<symbol> ( </symbol>
<parameterList>
</parameterList>
	<symbol> ) </symbol>
<subroutineBody>
	<symbol> { </symbol>
<statements>
<whileStatement>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<symbol> { </symbol>
	<symbol> { </symbol>
<statements>
<letStatement>
	<keyword> let </keyword>
	<identifier> size </identifier>
	<symbol> = </symbol>
	<keyword> let </keyword>
</letStatement>
<letStatement>
	<keyword> let </keyword>
	<identifier> a </identifier>
	<symbol> [ </symbol>
	<symbol> = </symbol>
</statements>
	<symbol> } </symbol>
</whileStatement>
</statements>
	<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
	<symbol> } </symbol>
</class>
