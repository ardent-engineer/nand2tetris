// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array ram, heap, freeList, heapBase, heapLength, heapNext;

    /** Initializes the class. */
    function void init() {
      let ram = 0;
      let heapBase = 2048;
      let heapLength = 14335;
      let heapNext = 0;

      let heap = heapBase;
      let freeList = heap;
      let heap[0] = heapNext;
      let heap[1] = heapLength;

      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let ram[address] = value;

      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var int sBaseAddress, sNext, sLength, newsBaseAddress, newsNext, newsLength;

      // initialize
      let sBaseAddress = freeList;
      let sNext = ram[sBaseAddress];
      let sLength = ram[sBaseAddress + 1];

      // find s
      while (sLength < (size + 2)) { // 2 extra spaces for next and s size
        let sBaseAddress = sNext;
        let sNext = ram[sBaseAddress];
        let sLength = ram[sBaseAddress + 1];
      }

      // update current s length
      let sLength = ram[sBaseAddress + 1] - size;
      let ram[sBaseAddress + 1] = sLength;
      // set new base address
      let newsBaseAddress = sBaseAddress + 2 + sLength;
      // set next of new s
      let newsNext = 0; // points to nothing
      let ram[newsBaseAddress] = newsNext; // points to nothing
      // set length of new s
      let ram[newsBaseAddress + 1] = size;
      // return block address after 2 metadata blocks
      return newsBaseAddress + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var int nAddr, cAddr;

      let cAddr = freeList;
      let nAddr = ram[cAddr];

      // find end of free list
      while (~(nAddr = 0)) {
        let cAddr = nAddr;
        let nAddr = ram[cAddr];
      }

      // append object to end of freelist
      let ram[nAddr] = o;

      return;
    }